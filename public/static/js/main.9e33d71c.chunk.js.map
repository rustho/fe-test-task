{"version":3,"sources":["features/game/types/index.ts","features/game/components/Cell/Cell.tsx","features/game/components/Board/Board.tsx","features/game/components/Header/Header.tsx","features/game/components/Log/Log.tsx","features/game/containers/GameSlice.ts","features/game/containers/Game.tsx","App.tsx","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["PlayerSide","Player","sign","nought","cross","Cell","state","Paper","style","width","height","background","display","justifyContent","alignItems","square","Board","board","onClick","Grid","container","justify","spacing","map","row","i","item","xs","cell","j","margin","Header","player","side","Log","logs","overflow","List","coords","ListItem","x","y","emptyBoard","Array","fill","initialState","currentPlayer","winner","changeSide","gameSlice","createSlice","name","reducers","newGame","move","action","newBoard","slice","payload","AI","changePlayer","endGame","console","log","actions","selectBoard","game","selectLogs","selectCurrentPlayer","Game","useSelector","dispatch","useDispatch","fetch","then","response","json","body","sm","App","className","counterSlice","value","increment","decrement","incrementByAmount","store","configureStore","reducer","counter","counterReducer","gameReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9e33d71c.chunk.js","sourcesContent":["export enum PlayerSide {\n  cross = \"x\",\n  nought = \"o\",\n}\n\nexport enum Player {\n  Player = \"Игрок\",\n  AI = \"ИИ\",\n}\n\nexport type CellType = null | PlayerSide.cross | PlayerSide.nought;\n\nexport interface LogInfo {\n  player: Player;\n  coords: { x: number; y: number };\n}\n","import { Paper } from \"@material-ui/core\";\nimport React from \"react\";\nimport { CellType, PlayerSide } from \"../../types\";\n\nexport interface CellProps {\n  state: CellType;\n}\n\nconst sign = (sign: CellType) => {\n  switch (sign) {\n    case PlayerSide.nought:\n      return <>o</>;\n    case PlayerSide.cross:\n      return <>x</>;\n    default:\n      return <></>;\n  }\n};\n\nexport const Cell = ({ state }: CellProps) => {\n  return (\n    <Paper\n      style={{\n        width: \"50px\",\n        height: \"50px\",\n        background: \"#f00\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n      square\n    >\n      {sign(state)}\n    </Paper>\n  );\n};\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport { CellType } from \"../../types\";\nimport { Cell } from \"../Cell/Cell\";\n\nexport interface BoardProps {\n  board: CellType[][];\n  onClick: (x: number, y: number) => void;\n}\n\nexport const Board = ({ board, onClick }: BoardProps) => {\n  return (\n    <Grid container justify=\"center\" spacing={1}>\n      {board.map((row, i) => {\n        return (\n          <Grid container justify=\"center\" item xs={12}>\n            {row.map((cell, j) => {\n              return (\n                <div onClick={() => onClick(i, j)} style={{ margin: \"5px\" }}>\n                  <Cell state={cell}></Cell>\n                </div>\n              );\n            })}\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n};\n","import React from \"react\";\nimport { Player, PlayerSide } from \"../../types\";\n\nexport interface HeaderProps {\n  player: Player;\n  side: PlayerSide;\n}\n\nexport const Header = ({ player, side }: HeaderProps) => {\n  return (\n    <div>\n      <h2>\n        Ходит {player} - {side}\n      </h2>\n    </div>\n  );\n};\n","import { List, ListItem } from \"@material-ui/core\";\nimport React from \"react\";\nimport { LogInfo } from \"../../types\";\n\nexport interface LogProps {\n  logs: LogInfo[];\n}\n\nexport const Log = ({ logs }: LogProps) => {\n  return (\n    <div style={{ height: \"300px\", overflow: \"auto\" }}>\n      <List>\n        {logs.map(({ player, coords }) => (\n          <ListItem>\n            Player {player} move {coords.x}, {coords.y}\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  );\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk, RootState } from \"../../../app/store\";\r\nimport { CellType, LogInfo, Player, PlayerSide } from \"../types\";\r\n\r\ninterface GameState {\r\n  board: CellType[][];\r\n  logs: LogInfo[];\r\n  currentPlayer: { player: Player; side: PlayerSide };\r\n  winner: null | Player;\r\n}\r\n\r\nconst emptyBoard = () => {\r\n  return new Array(3).fill(new Array(3).fill(null));\r\n};\r\n\r\nconst initialState: GameState = {\r\n  board: emptyBoard(),\r\n  logs: [],\r\n  currentPlayer: {\r\n    player: Player.Player,\r\n    side: PlayerSide.cross,\r\n  },\r\n  winner: null,\r\n};\r\n\r\nconst changeSide = (side: PlayerSide): PlayerSide => {\r\n  return side === PlayerSide.cross ? PlayerSide.nought : PlayerSide.cross;\r\n};\r\nconst changePlayer = (player: Player): Player => {\r\n  return player === Player.AI ? Player.Player : Player.AI;\r\n};\r\n\r\nexport const gameSlice = createSlice({\r\n  name: \"game\",\r\n  initialState,\r\n  reducers: {\r\n    newGame: (state) => {\r\n      state.board = emptyBoard();\r\n      state.logs = [];\r\n      state.currentPlayer.side = changeSide(state.currentPlayer.side);\r\n    },\r\n    move: (state: GameState, action: PayloadAction<any>) => {\r\n      const newBoard = state.board.slice();\r\n      const { x, y, player } = action.payload;\r\n      newBoard[x][y] = player.side;\r\n      state.board = newBoard;\r\n      state.currentPlayer.side = changeSide(state.currentPlayer.side);\r\n      state.currentPlayer.player = changePlayer(state.currentPlayer.player);\r\n      state.logs = [...state.logs, { player: player.player, coords: { x, y } }];\r\n    },\r\n    endGame: (state: GameState, action: PayloadAction<any>) => {\r\n      console.log(action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { move, newGame, endGame } = gameSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectBoard = (state: RootState) => state.game.board;\r\nexport const selectLogs = (state: RootState) => state.game.logs;\r\nexport const selectCurrentPlayer = (state: RootState) =>\r\n  state.game.currentPlayer;\r\n\r\nexport default gameSlice.reducer;\r\n","import { Grid, Paper } from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Board } from \"../components/Board/Board\";\nimport { Header } from \"../components/Header/Header\";\nimport { Log } from \"../components/Log/Log\";\nimport {\n  selectBoard,\n  selectLogs,\n  selectCurrentPlayer,\n  move,\n} from \"./GameSlice\";\n\nexport const Game = () => {\n  const board = useSelector(selectBoard);\n  const logs = useSelector(selectLogs);\n  const currentPlayer = useSelector(selectCurrentPlayer);\n  const dispatch = useDispatch();\n\n  const winnerUniq = (set: Array<any>) => {\n    return Array.from(new Set(set)).length === 1 && set[0] !== null\n      ? set[0]\n      : null;\n  };\n\n  fetch(\"/api/game\")\n    .then((response) => response.json())\n    .then((json) => {\n      console.log(json.body);\n    });\n//   fetch(\"./api/game\", {\n//     headers: {\n//       accept: \"application/json, text/javascript, */*; q=0.01\",\n//       \"content-type\": \"application/json; charset=UTF-8\",\n//     },\n//   })\n    // .then((response) => response.json())\n    // .then((json) => {\n    //   console.log(json.body);\n    // });\n  //   const checkWinner = () => {\n  //     const newBoard = board;\n\n  //     for (let i = 0; i < 3; i++) {\n  //       const row = winnerUniq(newBoard[i]);\n  //       if (row) {\n  //         dispatch(endGame({ winner: row }));\n  //       }\n  //       const col = winnerUniq([newBoard[0][i], newBoard[1][i], newBoard[2][i]]);\n  //       if (col) {\n  //         dispatch(endGame({ winner: col }));\n  //       }\n  //     }\n  //     const diag1 = winnerUniq([newBoard[0][0], newBoard[1][1], newBoard[2][2]]);\n  //     if (diag1) {\n  //       dispatch(endGame({ winner: diag1 }));\n  //     }\n  //     const diag2 = winnerUniq([newBoard[2][2], newBoard[1][1], newBoard[0][0]]);\n  //     if (diag2) {\n  //       dispatch(endGame({ winner: diag2 }));\n  //     }\n  //   };\n  // checkWinner();\n\n  const handleClick = (x: number, y: number) => {\n    dispatch(move({ x, y, player: currentPlayer }));\n  };\n\n  return (\n    <Grid\n      style={{ width: \"700px\" }}\n      justify=\"space-between\"\n      container\n      spacing={3}\n    >\n      <Grid xs={12}>\n        <Paper>\n          <Header\n            player={currentPlayer.player}\n            side={currentPlayer.side}\n          ></Header>\n        </Paper>\n      </Grid>\n      <Grid xs={12} sm={7}>\n        <Paper>\n          <Board onClick={handleClick} board={board}></Board>\n        </Paper>\n      </Grid>\n      <Grid xs={12} sm={4}>\n        <Paper>\n          <Log logs={logs}></Log>\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n};\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport { Counter } from \"./features/counter/Counter\";\r\nimport \"./App.css\";\r\nimport { Game } from \"./features/game/containers/Game\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Game />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport counterReducer from \"../features/counter/counterSlice\";\r\nimport gameReducer from \"../features/game/containers/GameSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    game: gameReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}